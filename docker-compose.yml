networks:
  axum_network:
    driver: bridge

volumes:
  pgdata:

services:
  postgres:
    build:
      context: ./docker/
      dockerfile: Dockerfile.pg
      args:
          http_proxy:  http://172.23.11.105:2002
          https_proxy: http://172.23.11.105:2002
    image: otp-postgres:pg-cron
    container_name: axum_db
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin123}
      POSTGRES_DB: ${POSTGRES_DB:-db}
      TZ: ${TZ:-Asia/Tashkent}
    # pg_cron ishlashi uchun preload shart; qaysi DBâ€™da ishlashini ham ko'rsatamiz
    command:
      - "postgres"
      - "-c"
      - "shared_preload_libraries=pg_cron"
      - "-c"
      - "cron.database_name=${POSTGRES_DB:-db}"
      # Ixtiyoriy: loglarni qulayroq formatda
      - "-c"
      - "log_min_duration_statement=500ms"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - axum_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  adminer:
    build:
      context: ./docker/
      dockerfile: Dockerfile.adminer
    container_name: axum_db_adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=custom
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - axum_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      options:
        max-size: "10m"
        max-file: "3"
  redis:
    image: redis:latest
    container_name: axum_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - axum_network
